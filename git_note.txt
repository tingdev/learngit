ref:https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000 

========================================================================
# ssh to github;
* check ssh keys in ~/.ssh/ , id_rsa&id_rsa.pub;

$ pwd
/c/Users/Administrator/.ssh

* if no, gen keys
	ssh-keygen -t rsa -C "youremail@example.com"
* on github, accounts settings, ssh keys, copy id_rsa.pub into it;
* ssh -T git@github.com     # this is to test
* git init, add, commit ...;
* git remote add origin git@github.com:tingdev/learngit.git     #only once
* git push -u origin master			# first time,  push local master to remote(i.e. origin) master
* git push					# later
========================================================================
copy id_rsa & id_rsa.pub to a new computer

git clone git@github.com:tingdev/learngit.git	# clone git remote repo.  no need git init

========================================================================

Linus

git init
git status
git log
git reflog	# all operation logs, it's useful when you want to reset to a LATER revision

git add xx	# add to stage

# if already add to unstage, reset HEAD will unstage it.
git reset HEAD file 	# reset file in the stage to the HEAD of local repo.
			# NOTE: if file is modified and add to unstage, then file would be unstaged, the modification WON'T lost!

git commit -m "ccc"  	# commit from stage to local repo

# if already commit to local repo. use reset commit id.   check commit id with git log.  this would unstage it.
git reset --hard commit_id		# roll back, id can be  HEAD~1 (ie. 1 revision before HEAD), or the id.

# if you want to discard changes in working copy, use checkout
# but REMEMBER! if file is staged, git checkout will NOT overwrite it!!!!
# SO, do unstaged file with (git reset HEAD file) before (git checkout -- file) to discard unexpected changes!!
git checkout -- file


========================================================================
at begining, HEAD --> master

git checkout -b dev	# create & switch to 'dev' branch
	git branch dev
	git checkout dev

git branch	# display branches

git checkout master
git merge dev	# merge dev to master, if no conflict, just move pointer, which is very fast!

# when github has no branch dev, git push will warn you and prompt with the correct cmd, which will create dev branch on github
$ git push
fatal: The current branch dev has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin dev

git branch -d dev	# delete branch dev, if already push dev to orgin, then you can still checkout dev from origin

# this is the merge result of modifications on master and dev!

git log --graph --pretty=oneline --abbrev-commit	# graph show, each one line, commit id abbrev.

git merge --no-ff dev	# explicitly noted no fast-forward
